service: mossad

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

provider:
  name: aws
  runtime: java8
  region: eu-west-1

  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - ec2:CreateNetworkInterface
      - ec2:DescribeNetworkInterfaces
      - ec2:DeleteNetworkInterface
    Resource: "*"

package:
  artifact: build/distributions/mossad-1.0-SNAPSHOT.zip

functions:
  get:
    handler: mossad.GetHandler
    timeout: 30
    memorySize: 128
    environment:
      redisEndpoint:
        "Fn::GetAtt": [ServerlessElasticacheCluster, RedisEndpoint.Address]
      redisPort:
        "Fn::GetAtt": [ServerlessElasticacheCluster, RedisEndpoint.Port]

    vpc:
      securityGroupIds:
        - "Fn::GetAtt": ServerlessSecurityGroup.GroupId
      subnetIds:
        - Ref: ServerlessSubnet
    events:
      - http:
          path: recommendations/{id}
          method: get
          request:
            parameters:
              paths:
                id: true

  put:
      handler: mossad.PutHandler
      timeout: 30
      memorySize: 128
      environment:
        redisEndpoint:
          "Fn::GetAtt": [ServerlessElasticacheCluster, RedisEndpoint.Address]
        redisPort:
          "Fn::GetAtt": [ServerlessElasticacheCluster, RedisEndpoint.Port]

      vpc:
        securityGroupIds:
          - "Fn::GetAtt": ServerlessSecurityGroup.GroupId
        subnetIds:
          - Ref: ServerlessSubnet
      events:
        - http:
            path: recommendations
            method: put
            request:
              parameters:
                paths:
                  id: true

  extract:
    handler: mossad.ExtractionHandler
    timeout: 300
    memorySize: 1024
    environment:
        threadPoolSize: 5
        maxPages: 43
        pageSize: 500
        apiBaseUrl: { "Fn::Join" : ["", [" https://", { "Ref" : "ApiGatewayRestApi" }, ".execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}" ] ]  }
    events:
      - schedule:
         rate: rate(15 minutes)
         enabled: true


resources:
  Resources:
    ServerlessVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
    ServerlessSubnet:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.0.0/24"
    ServerlessSecurityGroup:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: ServerlessVPC
    ServerlessStorageSecurityGroup:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for cache cluster
        VpcId:
          Ref: ServerlessVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          SourceSecurityGroupId:
            Ref: ServerlessSecurityGroup
    ServerlessElasticacheSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        Description: "Cache Subnet Group"
        SubnetIds:
        - Ref: ServerlessSubnet
    ServerlessElasticacheCluster:
      DependsOn: ServerlessStorageSecurityGroup
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        AutoMinorVersionUpgrade: true
        Engine: redis
        CacheNodeType: cache.t1.micro
        NumCacheNodes: 1
        VpcSecurityGroupIds:
        - "Fn::GetAtt": ServerlessStorageSecurityGroup.GroupId
        CacheSubnetGroupName:
          Ref: ServerlessElasticacheSubnetGroup